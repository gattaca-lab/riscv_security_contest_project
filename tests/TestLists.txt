#add_debugger_test(debugger_sanity debugger/debugger_sanity.s
#                  ${CMAKE_SOURCE_DIR}/tests/debugger/sanity.input --repl)

test_add(basic_mem         basic/mem.py)
test_add(store_byte_issue  basic/store_byte_issue.py)

test_add(asm_simple             asm/examples/simple.s)

test_add(asm_cext_srai          asm/compressed/c_srai.s ENABLE_C_EXT)
test_add(asm_cext_srli          asm/compressed/c_srli.s ENABLE_C_EXT)
test_add(asm_cext_and           asm/compressed/c_and.s ENABLE_C_EXT)
test_add(asm_cext_xor           asm/compressed/c_xor.s ENABLE_C_EXT)
test_add(asm_cext_or            asm/compressed/c_or.s ENABLE_C_EXT)
test_add(asm_cext_addi4spn      asm/compressed/c_addi4spn.s ENABLE_C_EXT)
test_add(asm_cext_addi16sp      asm/compressed/c_addi16sp.s ENABLE_C_EXT)
test_add(asm_cext_andi          asm/compressed/c_andi.s ENABLE_C_EXT)

test_add(asm_cext_beq           asm/compressed/c_beq.s ENABLE_C_EXT)
test_add(asm_cext_bne           asm/compressed/c_bne.s ENABLE_C_EXT)
test_add(asm_cext_j             asm/compressed/c_j.s ENABLE_C_EXT)
test_add(asm_cext_jal           asm/compressed/c_jal.s ENABLE_C_EXT)
test_add(asm_cext_li            asm/compressed/c_li.s ENABLE_C_EXT)
test_add(asm_cext_lui           asm/compressed/c_lui.s ENABLE_C_EXT)
test_add(asm_cext_addi          asm/compressed/c_addi.s ENABLE_C_EXT)
test_add(asm_cext_lw            asm/compressed/c_lw.s ENABLE_C_EXT)
test_add(asm_cext_sw            asm/compressed/c_sw.s ENABLE_C_EXT)
test_add(asm_cext_slli          asm/compressed/c_slli.s ENABLE_C_EXT)
test_add(asm_cext_swsp          asm/compressed/c_swsp.s ENABLE_C_EXT)
test_add(asm_cext_lwsp          asm/compressed/c_lwsp.s ENABLE_C_EXT)
test_add(asm_cext_mv            asm/compressed/c_mv.s ENABLE_C_EXT)
test_add(asm_cext_jr            asm/compressed/c_jr.s ENABLE_C_EXT)
test_add(asm_cext_jalr          asm/compressed/c_jalr.s ENABLE_C_EXT)
test_add(asm_cext_cadd          asm/compressed/c_add.s ENABLE_C_EXT)
test_add(asm_cext_basic         asm/compressed/c_basic.s ENABLE_C_EXT)
test_add(asm_cext_fetch_flow    asm/compressed/c_fetch_flow.s ENABLE_C_EXT)
test_add(asm_cext_fetch_flow_b  asm/compressed/c_fetch_flow_brn.s ENABLE_C_EXT)

test_add(asm_timer              asm/timer.s)
test_add(asm_uart               asm/uart.s)
test_add(asm_uart_collapse      asm/uart_collapse.s)
test_add(asm_sb                 asm/sb.s)
test_add(asm_lb                 asm/lb.s)
test_add(asm_sb_ret             asm/sb_ret.s)
test_add(asm_remu               asm/remu.s NIGHTLY)
test_add(asm_remu_illegal       asm/remu_illegal.s NIGHTLY)

test_add(asm_tags               asm/tags/tags.s)
test_add(asm_tags_stlt_storage  asm/tags/stlt_storage.s)
test_add(asm_tags_ram_border    asm/tags/ram_border.s)
test_add(asm_tags_pend_clear    asm/tags/pend_clear.s)
test_add(asm_tags_sec_leak      asm/tags/sec_leak.s NIGHTLY)
test_add(asm_tags_sec_corrupt   asm/tags/sec_corrupt.s NIGHTLY)
test_add(asm_tags_mismatch_if_icd   asm/tags/mismatch_if_icd.s)
test_add(asm_tags_mismatch_if_ice   asm/tags/mismatch_if_ice.s)
test_add(asm_tags_mismatch_sw   asm/tags/mismatch_sw.s)
test_add(asm_tags_mismatch_lw   asm/tags/mismatch_lw.s)
test_add(asm_tags_match_s_l     asm/tags/match_s_l.s)
test_add(asm_tags_disabled_stlt asm/tags/disabled_stlt.s)

test_add(asm_mext_mult          asm/mext/mult.s)
test_add(asm_mext_mulh          asm/mext/mulh.s)
test_add(asm_mext_mulhsu        asm/mext/mulhsu.s)
test_add(asm_mext_mulhu         asm/mext/mulhu.s)

test_add(asm_mext_div           asm/mext/div.s)
test_add(asm_mext_divu          asm/mext/divu.s)
test_add(asm_mext_rem           asm/mext/rem.s)
test_add(asm_mext_remu          asm/mext/remu.s)
test_add(asm_mext_zero          asm/mext/zerodiv.s)

test_add(asm_csrr_vendorid      asm/csrr_vendor.s NIGHTLY)
test_add(asm_csrw_vendorid      asm/csrw_vendor.s NIGHTLY)
test_add(asm_csre_missing_csr   asm/csrr_missing.s NIGHTLY)
test_add(asm_csrrw_small   asm/csrrw_compliance.s)
test_add(asm_csrrs_small   asm/csrrs_compliance.s)

test_add(c_basic             c/basic)

test_add(c_libc_exit_S       c/libc/exit_succ)
test_add(c_libc_exit_F       c/libc/exit_fail INVERT_RESULT)
test_add(c_libc_main_ret_S   c/libc/main_ret_succ)
test_add(c_libc_main_ret_F   c/libc/main_ret_fail INVERT_RESULT)
test_add(c_libc_printf4      c/libc/printf4)
test_add(c_libc_printf5      c/libc/printf5)
test_add(c_libc_printf_int   c/libc/printf_int)
test_add(c_libc_malloc       c/libc/malloc)
test_add(c_libc_memset       c/libc/memset)
test_add(c_libc_memcmp       c/libc/memcmp)
test_add(c_libc_printk       c/libc/printk)
test_add(c_libc_printk_ns       c/libc/printk DISABLE_SECURITY)
test_add(c_libc_strcat       c/libc/strcat)
test_add(c_libc_strcpy       c/libc/strcpy)
test_add(c_libc_strlen       c/libc/strlen)
test_add(c_libc_strncat      c/libc/strncat WARN_DISABLE)
test_add(c_libc_strncpy      c/libc/strncpy WARN_DISABLE)
test_add(c_libc_strtoul      c/libc/strtoul)
test_add(c_libc_strcmp       c/libc/strcmp)

test_add(c_Slibc_s_malloc     c/libc_sec/s_malloc)
test_add(c_Slibc_s_free       c/libc_sec/s_free NIGHTLY)
test_add(c_Slibc_ns_malloc    c/libc_sec/ns_malloc DISABLE_SECURITY)
test_add(c_Slibc_ns_free      c/libc_sec/ns_free DISABLE_SECURITY)

test_add(c_soc_isr_route_timer_base   c/soc/isr_route_timer_base)
test_add(c_soc_isr_route_ialign_base  c/soc/isr_route_ialign_base NIGHTLY)
test_add(c_soc_hwrand                 c/soc/hwrand NIGHTLY)

test_add(c_example_cmdln   c/examples/cmd_line --cmd="./cmd.line")
test_add(c_example_prrel   c/examples/cmd_line --cmd="c/examples/cmd_line/cmd.line")
test_add(c_example_abs     c/examples/cmd_line
         --cmd="${CMAKE_SOURCE_DIR}/tests/c/examples/cmd_line/cmd.line")

test_add(c_fibonacci            c/fibo)
test_add(c_fibonacci_compressed c/fibo ENABLE_C_EXT)

test_add(c_ripe_ha1  c/ripe --cmd="./cfg/h_attack_1.cfg" INVERT_RESULT WARN_DISABLE)
test_add(c_ripe_ha2  c/ripe --cmd="./cfg/h_attack_2.cfg" INVERT_RESULT WARN_DISABLE)
test_add(c_ripe_ha3  c/ripe --cmd="./cfg/h_attack_3.cfg" INVERT_RESULT NIGHTLY WARN_DISABLE)
test_add(c_ripe_ha4  c/ripe --cmd="./cfg/h_attack_4.cfg" INVERT_RESULT NIGHTLY WARN_DISABLE)
test_add(c_ripe_ha5  c/ripe --cmd="./cfg/h_attack_5.cfg" INVERT_RESULT WARN_DISABLE)

test_add(c_ripe_a1   c/ripe --cmd="./cfg/attack_1.cfg" INVERT_RESULT WARN_DISABLE)
test_add(c_ripe_a2   c/ripe --cmd="./cfg/attack_2.cfg" INVERT_RESULT WARN_DISABLE)
test_add(c_ripe_a3   c/ripe --cmd="./cfg/attack_3.cfg" NIGHTLY INVERT_RESULT WARN_DISABLE)
test_add(c_ripe_a4   c/ripe --cmd="./cfg/attack_4.cfg" NIGHTLY INVERT_RESULT WARN_DISABLE)
test_add(c_ripe_a5   c/ripe --cmd="./cfg/attack_5.cfg" INVERT_RESULT WARN_DISABLE)

test_add(c_C_ripe_a1   c/ripe --cmd="./cfg/attack_1.cfg" INVERT_RESULT ENABLE_C_EXT WARN_DISABLE)
test_add(c_C_ripe_a2   c/ripe --cmd="./cfg/attack_2.cfg" INVERT_RESULT ENABLE_C_EXT WARN_DISABLE)
test_add(c_C_ripe_a3   c/ripe --cmd="./cfg/attack_3.cfg" NIGHTLY INVERT_RESULT ENABLE_C_EXT WARN_DISABLE)
test_add(c_C_ripe_a4   c/ripe --cmd="./cfg/attack_4.cfg" NIGHTLY INVERT_RESULT ENABLE_C_EXT WARN_DISABLE)
test_add(c_C_ripe_a5   c/ripe --cmd="./cfg/attack_5.cfg" INVERT_RESULT ENABLE_C_EXT WARN_DISABLE)

test_add(c_ns_ripe_a1   c/ripe --cmd="./cfg/attack_1.cfg" DISABLE_SECURITY WARN_DISABLE)
test_add(c_ns_ripe_a2   c/ripe --cmd="./cfg/attack_2.cfg" NIGHTLY DISABLE_SECURITY WARN_DISABLE)
test_add(c_ns_ripe_a3   c/ripe --cmd="./cfg/attack_3.cfg" DISABLE_SECURITY WARN_DISABLE)
test_add(c_ns_ripe_a4   c/ripe --cmd="./cfg/attack_4.cfg" DISABLE_SECURITY WARN_DISABLE)
test_add(c_ns_ripe_a5   c/ripe --cmd="./cfg/attack_5.cfg" DISABLE_SECURITY WARN_DISABLE)

test_add(c_nsC_ripe_a1  c/ripe --cmd="./cfg/attack_1.cfg" DISABLE_SECURITY ENABLE_C_EXT WARN_DISABLE)
test_add(c_nsC_ripe_a2  c/ripe --cmd="./cfg/attack_2.cfg" NIGHTLY DISABLE_SECURITY ENABLE_C_EXT WARN_DISABLE)
test_add(c_nsC_ripe_a3  c/ripe --cmd="./cfg/attack_3.cfg" DISABLE_SECURITY ENABLE_C_EXT WARN_DISABLE)
test_add(c_nsC_ripe_a4  c/ripe --cmd="./cfg/attack_4.cfg" DISABLE_SECURITY ENABLE_C_EXT WARN_DISABLE)
test_add(c_nsC_ripe_a5  c/ripe --cmd="./cfg/attack_5.cfg" DISABLE_SECURITY ENABLE_C_EXT WARN_DISABLE)

test_add(cripe_cfg_parser_unit0   c/ripe --cmd="./cfg_unit/attack_0.cfg" WARN_DISABLE)
test_add(cripe_cfg_parser_unit1   c/ripe --cmd="./cfg_unit/attack_1.cfg" INVERT_RESULT WARN_DISABLE)
test_add(cripe_cfg_parser_unit2   c/ripe --cmd="./cfg_unit/attack_2.cfg" INVERT_RESULT WARN_DISABLE)
test_add(cripe_cfg_parser_unit3   c/ripe --cmd="./cfg_unit/attack_3.cfg" WARN_DISABLE)
test_add(cripe_cfg_parser_unit4   c/ripe --cmd="./cfg_unit/attack_4.cfg" INVERT_RESULT WARN_DISABLE)
test_add(cripe_cfg_parser_unit5   c/ripe --cmd="./cfg_unit/attack_5.cfg" INVERT_RESULT WARN_DISABLE)

test_add(c_dhrystone_10 benchmarks/dhrystone WARN_DISABLE)
test_add(c_coremark benchmarks/coremark TICKS_TIMEOUT 30000000)

if (ENABLE_EXTENDED_RIPE_TESTS)
    include(${CMAKE_SOURCE_DIR}/cmake/ExtendedRipeTests.cmake)
endif()

foreach(test ${ZEPHYR_APPS})
    string(REPLACE "/" "_" APP_NAME ${test})
    test_add(zephyr_${APP_NAME} zephyr/${APP_NAME} NIGHTLY INVERT_RESULT)
endforeach()

#I
set(COMPLIANCE_SOURCES_ROOT ${CMAKE_SOURCE_DIR}/tests/compliance/rv32i/src)
set(FAILED_TESTS  "compliance_rv32i_I-MISALIGN_JMP-01.S"
                  "")
file(GLOB COMPLIANCE_TESTS "${COMPLIANCE_SOURCES_ROOT}/*.S")
foreach(file ${COMPLIANCE_TESTS})
    get_filename_component(NAME "${file}" NAME)
    if (compliance_rv32i_${NAME} IN_LIST FAILED_TESTS)
        test_add(compliance_rv32i_${NAME}  compliance/rv32i/src/${NAME} NIGHTLY)
    else()
        test_add(compliance_rv32i_${NAME}  compliance/rv32i/src/${NAME})
    endif()
endforeach()
#M
set(COMPLIANCE_SOURCES_ROOT ${CMAKE_SOURCE_DIR}/tests/compliance/rv32im/src)
file(GLOB COMPLIANCE_TESTS "${COMPLIANCE_SOURCES_ROOT}/*.S")
set(FAILED_TESTS  ""
                  "")
foreach(file ${COMPLIANCE_TESTS})
    get_filename_component(NAME "${file}" NAME)
    if (compliance_rv32im_${NAME} IN_LIST FAILED_TESTS)
        test_add(compliance_rv32im_${NAME}  compliance/rv32im/src/${NAME} NIGHTLY)
    else()
        test_add(compliance_rv32im_${NAME}  compliance/rv32im/src/${NAME})
    endif()
endforeach()
#C
set(COMPLIANCE_SOURCES_ROOT ${CMAKE_SOURCE_DIR}/tests/compliance/rv32imc/src)
file(GLOB COMPLIANCE_TESTS "${COMPLIANCE_SOURCES_ROOT}/*.S")
set(FAILED_TESTS  ""
                  "")
foreach(file ${COMPLIANCE_TESTS})
    get_filename_component(NAME "${file}" NAME)
    if (compliance_rv32imc_${NAME} IN_LIST FAILED_TESTS)
        test_add(compliance_rv32imc_${NAME}  compliance/rv32imc/src/${NAME} ENABLE_C_EXT NIGHTLY)
    else()
        test_add(compliance_rv32imc_${NAME}  compliance/rv32imc/src/${NAME} ENABLE_C_EXT)
    endif()
endforeach()
